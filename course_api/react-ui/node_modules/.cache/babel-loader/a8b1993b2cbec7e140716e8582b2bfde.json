{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/asilverde/CS196/Group24/course_api/react-ui/src/components/CourseSelect.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from \"@material-ui/core/TextField\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { sleep } from \"../App\";\nimport \"../App.css\";\nexport default function CourseSelect(props) {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState([]);\n  const loading = open && options.length === 0;\n\n  function handleChange(e) {\n    if (props.type == \"department\") {\n      props.onDeptSelect(e);\n    }\n\n    if (props.type == \"classes\") {\n      props.onClassSelect(e);\n    }\n  }\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    var type = props.type;\n    const response = \"loading\";\n\n    (async () => {\n      const response = await fetch(props.route).then(response => response.json().then(data => {\n        setOptions(data);\n      }));\n      await sleep(1e3); // For demo purposes.\n\n      let countries = \"loading\";\n\n      if (response != null) {\n        countries = await response.json();\n      }\n\n      if (active) {\n        setOptions(Object.keys(countries).map(key => countries[key].item[0]));\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n  React.useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      id: props.type,\n      size: \"small\" //multiple\n      //limitTags={2}\n      //style={{ width: 200 }}\n      ,\n      open: open,\n      onOpen: () => {\n        setOpen(true);\n        console.log(props.route);\n      },\n      onClose: e => {\n        if (props.type == \"department\") {\n          setOpen(false);\n          let value = e.target.innerHTML;\n          let id = value.split(\":\"); //gross way of getting department but it works use \"id[0]\"\n\n          handleChange(id[0]);\n        }\n\n        if (props.type == \"classes\") {\n          setOpen(false); //Not sure how the api wants the class formatted\n\n          let value = e.target.innerHTML;\n          let id = value.split(\":\"); //gross way\n\n          handleChange(id[0]);\n          console.log(e.target.innerHTML); //handleChange(CLASS_GOES_HERE)\n        }\n      },\n      getOptionSelected: (option, value) => option.name === value.name,\n      getOptionLabel: option => option.id + \": \" + option.name,\n      options: options,\n      loading: loading,\n      onClick: props.onChange,\n      onChange: (props.onChange, (event, object) => {\n        if (props.type == \"department\") {\n          console.log(props.type);\n        } else if (props.type == \"classes\") {\n          console.log(props.type);\n        }\n      }),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        id: props.type,\n        label: props.type,\n        variant: \"outlined\",\n        value: props.type,\n        onChange: props.onChange,\n        class: \"autocomplete\",\n        InputProps: { ...params.InputProps,\n          endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 48\n            }, this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 33\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CourseSelect, \"NAnsH/wQUpBOztFs1nPXEavBw+I=\");\n\n_c = CourseSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"CourseSelect\");","map":{"version":3,"sources":["/home/asilverde/CS196/Group24/course_api/react-ui/src/components/CourseSelect.js"],"names":["React","useState","useEffect","Autocomplete","TextField","CircularProgress","sleep","CourseSelect","props","open","setOpen","options","setOptions","loading","length","handleChange","e","type","onDeptSelect","onClassSelect","active","undefined","response","fetch","route","then","json","data","countries","Object","keys","map","key","item","console","log","value","target","innerHTML","id","split","option","name","onChange","event","object","params","InputProps","endAdornment"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {useState, useEffect} from \"react\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from \"@material-ui/core/TextField\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {sleep} from \"../App\"\nimport \"../App.css\"\n\n\n\nexport default function CourseSelect(props) {\n    const [open, setOpen] = React.useState(false);\n    const [options, setOptions] = React.useState([]);\n    const loading = open && options.length === 0;\n\n    function handleChange(e) {\n        if (props.type == \"department\") {\n            props.onDeptSelect(e)\n        }\n        if (props.type == \"classes\") {\n            props.onClassSelect(e)\n        }\n    }\n\n    React.useEffect(() => {\n        let active = true;\n\n        if (!loading) {\n            return undefined;\n        }\n        var type = props.type;\n        const response = \"loading\";\n        (async () => {\n\n            const response = await fetch(props.route).then(response => response.json().then(data => {\n                    setOptions(data);\n                })\n            );\n            await sleep(1e3); // For demo purposes.\n            let countries = \"loading\";\n            if (response != null) {\n                countries = await response.json();\n            }\n            if (active) {\n                setOptions(Object.keys(countries).map((key) => countries[key].item[0]));\n            }\n        })();\n\n        return () => {\n            active = false;\n        };\n    }, [loading]);\n\n    React.useEffect(() => {\n        if (!open) {\n            setOptions([]);\n        }\n    }, [open]);\n\n    return (\n        <div >\n            <Autocomplete\n                id={props.type}\n                size=\"small\"\n                //multiple\n                //limitTags={2}\n                //style={{ width: 200 }}\n                open={open}\n                onOpen={() => {\n                    setOpen(true);\n                    console.log(props.route)\n                }}\n                onClose={(e) => {\n                    if (props.type == \"department\") {\n                        setOpen(false);\n                        let value = e.target.innerHTML\n                        let id = value.split(\":\")\n                        //gross way of getting department but it works use \"id[0]\"\n                        handleChange(id[0])\n                        \n                    }\n                    if (props.type == \"classes\") {\n                        setOpen(false);\n                        //Not sure how the api wants the class formatted\n\n                        let value = e.target.innerHTML\n                        let id = value.split(\":\")\n                        //gross way\n                        handleChange(id[0])\n\n                        console.log(e.target.innerHTML)\n                        //handleChange(CLASS_GOES_HERE)\n                    }\n\n                }}\n                getOptionSelected={(option, value) => option.name === value.name}\n                getOptionLabel={(option) => option.id + \": \" + option.name}\n                options={options}\n                loading={loading}\n                onClick={props.onChange}\n                onChange={props.onChange,\n                    (event, object) => {\n                    if (props.type == \"department\") {\n                    console.log(props.type)\n                }\n                    else if (props.type == \"classes\") {\n                    console.log(props.type)\n                }\n\n                }}\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        id={props.type}\n                        label={props.type}\n                        variant=\"outlined\"\n                        value={props.type}\n                        onChange={props.onChange}\n                        class=\"autocomplete\"\n                        InputProps={{\n                            ...params.InputProps,\n                            endAdornment: (\n                                <React.Fragment>\n                                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                    {params.InputProps.endAdornment}\n                                </React.Fragment>\n                            ),\n                        }}\n                    />\n\n                )}\n            />\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}
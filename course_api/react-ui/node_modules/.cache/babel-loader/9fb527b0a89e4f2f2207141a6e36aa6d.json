{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/asilverde/CS196/Group24/course_api/react-ui/src/components/ReactCalendar.js\";\nimport FullCalendar, { CalendarApi, render } from '@fullcalendar/react';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport { Calendar } from '@fullcalendar/core';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport React from 'react';\nimport * as rosterdata from './roster.json';\n/*\neventClick: function(info) {\n    alert('Event: ' + info.event.title);\n    alert('Coordinates: ' + info.jsEvent.pageX + ',' + info.jsEvent.pageY);\n    alert('View: ' + info.view.type);\n\n    // change the border color just for fun\n    info.el.style.borderColor = 'red';\n  }\n  */\n\n/*\n let i;\n for (i=0; i<rosterdata.courses.length; i++) {\n userCourses[i] = rosterdata.courses[i]\n console.log(userCourses[i])\n }\n*/\n\nexport default class ReactCalendar extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.eventselect = arg => {\n      //console.log(\"reactcalendar length\" + this.props.events.length)\n      let i;\n\n      for (i = 0; i < this.props.events.length; i++) {\n        if (this.props.events[i].title === arg.event.title) {\n          console.log(this.props.events[i].title);\n          console.log(arg.event.title);\n          console.log(i); //.setProp( \"display\", \"auto\" )\n          //arg.event.setProp( \"backgroundColor\", \"blue\")\n          //return this.props.events[i]\n\n          this.props.events[i].display = \"auto\";\n          this.props.select.eventsel(i);\n        }\n      }\n    };\n\n    this.updatesize = cal => {\n      cal.updateSize();\n    };\n  }\n\n  render() {\n    let courses;\n    return (\n      /*#__PURE__*/\n\n      /*\n          courses = this.props.events,\n      \n      document.addEventListener('DOMContentLoaded', function() {\n          var calendarEl = document.getElementById('calendar');\n          var calendar = new Calendar(calendarEl, {\n            plugins: [ timeGridPlugin, interactionPlugin ],\n            initialView: 'timeGridWeek',\n            stickyHeaderDates: true,\n            stickyFooterScrollbar: true,\n            height: window.innerHeight,\n            //contentHeight={'auto'}\n            editable: true,\n            slotMinTime: '8:00:00',\n            slotMaxTime: \"22:00:00\",\n            hiddenDays: [0,6],\n            headerToolbar: false,\n            allDaySlot: false,\n            expandRows: true,\n            handleWindowResize: true,\n            eventDurationEditable: false,\n            eventDragMinDistance: 1,\n            dayHeaderFormat: {weekday:'long'},\n            eventStartEditable: true,\n            durationEditable: false,\n            //eventContent={this.eventselect}\n            //events: this.props.events,\n            //eventMouseEnter: this.eventselect,\n            //eventClick: this.eventselect,\n            //dateClick={this.handleDateClick}\n            //select: this.updatesize\n          });\n          calendar.addEventSource( courses )\n          let source = calendar.getEventSources()\n          setInterval(() => {\n              calendar.render();\n              //source.eventSource.refetch()\n              //calendar.refetchEvents()\n          }, 300)\n        }),\n      <div id=\"calendar\" class=\"calendar\"></div>*/\n      _jsxDEV(\"div\", {\n        class: \"calendar\",\n        children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n          plugins: [timeGridPlugin, interactionPlugin],\n          initialView: 'timeGridWeek',\n          stickyHeaderDates: true,\n          stickyFooterScrollbar: true,\n          height: window.innerHeight,\n          editable: true,\n          slotMinTime: '8:00:00',\n          slotMaxTime: '22:00:00',\n          hiddenDays: [0, 6],\n          headerToolbar: false,\n          allDaySlot: false,\n          expandRows: true,\n          handleWindowResize: true,\n          eventDurationEditable: false,\n          eventDragMinDistance: 1,\n          dayHeaderFormat: {\n            weekday: 'long'\n          },\n          eventStartEditable: true,\n          durationEditable: false //eventContent={this.eventselect}\n          ,\n          events: this.props.events,\n          eventMouseEnter: this.eventselect,\n          eventClick: this.eventselect //dateClick={this.handleDateClick}\n          ,\n          select: this.updatesize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n}","map":{"version":3,"sources":["/home/asilverde/CS196/Group24/course_api/react-ui/src/components/ReactCalendar.js"],"names":["FullCalendar","CalendarApi","render","timeGridPlugin","Calendar","interactionPlugin","React","rosterdata","ReactCalendar","Component","eventselect","arg","i","props","events","length","title","event","console","log","display","select","eventsel","updatesize","cal","updateSize","courses","window","innerHeight","weekday"],"mappings":";;AAAA,OAAOA,YAAP,IAAuBC,WAAvB,EAAoCC,MAApC,QAAkD,qBAAlD;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,UAAZ,MAA4B,eAA5B;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AAAA;AAAA;;AAAA,SAyFvDC,WAzFuD,GAyFxCC,GAAD,IAAS;AACnB;AAEA,UAAIC,CAAJ;;AACJ,WAAKA,CAAC,GAAC,CAAP,EAAUA,CAAC,GAAC,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,MAA9B,EAAsCH,CAAC,EAAvC,EAA2C;AACvC,YAAG,KAAKC,KAAL,CAAWC,MAAX,CAAkBF,CAAlB,EAAqBI,KAArB,KAA+BL,GAAG,CAACM,KAAJ,CAAUD,KAA5C,EAAmD;AACnDE,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWC,MAAX,CAAkBF,CAAlB,EAAqBI,KAAjC;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACM,KAAJ,CAAUD,KAAtB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ,EAHmD,CAKnD;AACA;AACA;;AACA,eAAKC,KAAL,CAAWC,MAAX,CAAkBF,CAAlB,EAAqBQ,OAArB,GAA+B,MAA/B;AACA,eAAKP,KAAL,CAAWQ,MAAX,CAAkBC,QAAlB,CAA2BV,CAA3B;AACC;AACJ;AACA,KA1GsD;;AAAA,SA4GvDW,UA5GuD,GA4GzCC,GAAD,IAAS;AAClBA,MAAAA,GAAG,CAACC,UAAJ;AAEF,KA/GqD;AAAA;;AAIxDvB,EAAAA,MAAM,GAAG;AAEL,QAAIwB,OAAJ;AAGC;AAAA;;AAGI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY;AAAK,QAAA,KAAK,EAAC,UAAX;AAAA,+BAEA,QAAC,YAAD;AACI,UAAA,OAAO,EAAE,CAACvB,cAAD,EAAiBE,iBAAjB,CADb;AAEI,UAAA,WAAW,EAAE,cAFjB;AAGI,UAAA,iBAAiB,EAAE,IAHvB;AAII,UAAA,qBAAqB,EAAE,IAJ3B;AAKI,UAAA,MAAM,EAAEsB,MAAM,CAACC,WALnB;AAMI,UAAA,QAAQ,EAAE,IANd;AAOI,UAAA,WAAW,EAAE,SAPjB;AAQI,UAAA,WAAW,EAAE,UARjB;AASI,UAAA,UAAU,EAAE,CAAC,CAAD,EAAG,CAAH,CAThB;AAUI,UAAA,aAAa,EAAE,KAVnB;AAWI,UAAA,UAAU,EAAE,KAXhB;AAYI,UAAA,UAAU,EAAE,IAZhB;AAaI,UAAA,kBAAkB,EAAE,IAbxB;AAcI,UAAA,qBAAqB,EAAE,KAd3B;AAeI,UAAA,oBAAoB,EAAE,CAf1B;AAgBI,UAAA,eAAe,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WAhBrB;AAiBI,UAAA,kBAAkB,EAAE,IAjBxB;AAkBI,UAAA,gBAAgB,EAAE,KAlBtB,CAmBI;AAnBJ;AAoBI,UAAA,MAAM,EAAE,KAAKhB,KAAL,CAAWC,MApBvB;AAqBI,UAAA,eAAe,EAAE,KAAKJ,WArB1B;AAsBI,UAAA,UAAU,EAAE,KAAKA,WAtBrB,CAuBI;AAvBJ;AAwBI,UAAA,MAAM,EAAE,KAAKa;AAxBjB;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AA5CJ;AA8EH;;AAvFsD","sourcesContent":["import FullCalendar, { CalendarApi, render } from '@fullcalendar/react'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport { Calendar } from '@fullcalendar/core';\nimport interactionPlugin from '@fullcalendar/interaction'\nimport React from 'react';\nimport * as rosterdata from './roster.json'\n\n\n\n\n/*\neventClick: function(info) {\n    alert('Event: ' + info.event.title);\n    alert('Coordinates: ' + info.jsEvent.pageX + ',' + info.jsEvent.pageY);\n    alert('View: ' + info.view.type);\n\n    // change the border color just for fun\n    info.el.style.borderColor = 'red';\n  }\n  */\n\n/*\n let i;\n for (i=0; i<rosterdata.courses.length; i++) {\n userCourses[i] = rosterdata.courses[i]\n console.log(userCourses[i])\n }\n*/\n\nexport default class ReactCalendar extends React.Component {\n    \n    \n    \n   render() {\n       \n       let courses\n       \n   \n        return(\n            \n            \n            /*\n                courses = this.props.events,\n            \n            document.addEventListener('DOMContentLoaded', function() {\n                var calendarEl = document.getElementById('calendar');\n                var calendar = new Calendar(calendarEl, {\n                  plugins: [ timeGridPlugin, interactionPlugin ],\n                  initialView: 'timeGridWeek',\n                  stickyHeaderDates: true,\n                  stickyFooterScrollbar: true,\n                  height: window.innerHeight,\n                  //contentHeight={'auto'}\n                  editable: true,\n                  slotMinTime: '8:00:00',\n                  slotMaxTime: \"22:00:00\",\n                  hiddenDays: [0,6],\n                  headerToolbar: false,\n                  allDaySlot: false,\n                  expandRows: true,\n                  handleWindowResize: true,\n                  eventDurationEditable: false,\n                  eventDragMinDistance: 1,\n                  dayHeaderFormat: {weekday:'long'},\n                  eventStartEditable: true,\n                  durationEditable: false,\n                  //eventContent={this.eventselect}\n                  //events: this.props.events,\n                  //eventMouseEnter: this.eventselect,\n                  //eventClick: this.eventselect,\n                  //dateClick={this.handleDateClick}\n                  //select: this.updatesize\n                });\n                calendar.addEventSource( courses )\n                let source = calendar.getEventSources()\n                setInterval(() => {\n                    calendar.render();\n                    //source.eventSource.refetch()\n                    //calendar.refetchEvents()\n                }, 300)\n              }),\n  <div id=\"calendar\" class=\"calendar\"></div>*/\n            <div class=\"calendar\">\n                \n            <FullCalendar\n                plugins={[timeGridPlugin, interactionPlugin]}\n                initialView={'timeGridWeek'}\n                stickyHeaderDates={true}\n                stickyFooterScrollbar={true}\n                height={window.innerHeight}\n                editable={true}\n                slotMinTime={'8:00:00'}\n                slotMaxTime={'22:00:00'}\n                hiddenDays={[0,6]}\n                headerToolbar={false}\n                allDaySlot={false}\n                expandRows={true}\n                handleWindowResize={true}\n                eventDurationEditable={false}\n                eventDragMinDistance={1}\n                dayHeaderFormat={{weekday: 'long'}}\n                eventStartEditable={true}\n                durationEditable={false}\n                //eventContent={this.eventselect}\n                events={this.props.events}\n                eventMouseEnter={this.eventselect}\n                eventClick={this.eventselect}\n                //dateClick={this.handleDateClick}\n                select={this.updatesize}\n            />\n            </div>\n            \n\n        )\n\n\n    }\n    \n    eventselect = (arg) => { \n        //console.log(\"reactcalendar length\" + this.props.events.length)\n        \n        let i;\n    for (i=0; i<this.props.events.length; i++) {\n        if(this.props.events[i].title === arg.event.title) {\n        console.log(this.props.events[i].title)\n        console.log(arg.event.title)\n        console.log(i)\n        \n        //.setProp( \"display\", \"auto\" )\n        //arg.event.setProp( \"backgroundColor\", \"blue\")\n        //return this.props.events[i]\n        this.props.events[i].display = \"auto\"\n        this.props.select.eventsel(i);\n        }\n    }\n    }\n\n    updatesize = (cal) => {\n        cal.updateSize()\n    \n     }\n   \n}\n\n "]},"metadata":{},"sourceType":"module"}